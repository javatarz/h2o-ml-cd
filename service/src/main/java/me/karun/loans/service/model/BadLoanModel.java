package me.karun.loans.service.model;

/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-09-11T07:30:26.550-04:00
  3.10.4.8
  
  Standalone prediction code with sample test data for DRFModel named BadLoanModel

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/BadLoanModel > BadLoanModel.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m BadLoanModel.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="BadLoanModel", algorithm="drf")
public class BadLoanModel extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_BadLoanModel.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* loan_amnt */ null,
    /* term */ BadLoanModel_ColInfo_1.VALUES,
    /* emp_length */ null,
    /* home_ownership */ BadLoanModel_ColInfo_3.VALUES,
    /* annual_inc */ null,
    /* purpose */ BadLoanModel_ColInfo_5.VALUES,
    /* addr_state */ BadLoanModel_ColInfo_6.VALUES,
    /* dti */ null,
    /* delinq_2yrs */ null,
    /* revol_util */ null,
    /* total_acc */ null,
    /* longest_credit_length */ null,
    /* verification_status */ BadLoanModel_ColInfo_12.VALUES,
    /* bad_loan */ BadLoanModel_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.8170756157369565,0.18292438426304344};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.8170756157369565,0.18292438426304344};

  public BadLoanModel() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-5886874760859946540L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    BadLoanModel_Forest_0.score0(data,preds);
    BadLoanModel_Forest_1.score0(data,preds);
    BadLoanModel_Forest_2.score0(data,preds);
    BadLoanModel_Forest_3.score0(data,preds);
    BadLoanModel_Forest_4.score0(data,preds);
    preds[1] /= 5;
    preds[2] = 1.0 - preds[1];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.1779718438061801);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_BadLoanModel implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_BadLoanModel_0.fill(VALUES);
  }
  static final class NamesHolder_BadLoanModel_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "loan_amnt";
      sa[1] = "term";
      sa[2] = "emp_length";
      sa[3] = "home_ownership";
      sa[4] = "annual_inc";
      sa[5] = "purpose";
      sa[6] = "addr_state";
      sa[7] = "dti";
      sa[8] = "delinq_2yrs";
      sa[9] = "revol_util";
      sa[10] = "total_acc";
      sa[11] = "longest_credit_length";
      sa[12] = "verification_status";
    }
  }
}
// The class representing column term
class BadLoanModel_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    BadLoanModel_ColInfo_1_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "36 months";
      sa[1] = "60 months";
    }
  }
}
// The class representing column home_ownership
class BadLoanModel_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    BadLoanModel_ColInfo_3_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "ANY";
      sa[1] = "MORTGAGE";
      sa[2] = "NONE";
      sa[3] = "OTHER";
      sa[4] = "OWN";
      sa[5] = "RENT";
    }
  }
}
// The class representing column purpose
class BadLoanModel_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[14];
  static {
    BadLoanModel_ColInfo_5_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "car";
      sa[1] = "credit_card";
      sa[2] = "debt_consolidation";
      sa[3] = "educational";
      sa[4] = "home_improvement";
      sa[5] = "house";
      sa[6] = "major_purchase";
      sa[7] = "medical";
      sa[8] = "moving";
      sa[9] = "other";
      sa[10] = "renewable_energy";
      sa[11] = "small_business";
      sa[12] = "vacation";
      sa[13] = "wedding";
    }
  }
}
// The class representing column addr_state
class BadLoanModel_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[50];
  static {
    BadLoanModel_ColInfo_6_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "AK";
      sa[1] = "AL";
      sa[2] = "AR";
      sa[3] = "AZ";
      sa[4] = "CA";
      sa[5] = "CO";
      sa[6] = "CT";
      sa[7] = "DC";
      sa[8] = "DE";
      sa[9] = "FL";
      sa[10] = "GA";
      sa[11] = "HI";
      sa[12] = "IA";
      sa[13] = "ID";
      sa[14] = "IL";
      sa[15] = "IN";
      sa[16] = "KS";
      sa[17] = "KY";
      sa[18] = "LA";
      sa[19] = "MA";
      sa[20] = "MD";
      sa[21] = "ME";
      sa[22] = "MI";
      sa[23] = "MN";
      sa[24] = "MO";
      sa[25] = "MS";
      sa[26] = "MT";
      sa[27] = "NC";
      sa[28] = "NE";
      sa[29] = "NH";
      sa[30] = "NJ";
      sa[31] = "NM";
      sa[32] = "NV";
      sa[33] = "NY";
      sa[34] = "OH";
      sa[35] = "OK";
      sa[36] = "OR";
      sa[37] = "PA";
      sa[38] = "RI";
      sa[39] = "SC";
      sa[40] = "SD";
      sa[41] = "TN";
      sa[42] = "TX";
      sa[43] = "UT";
      sa[44] = "VA";
      sa[45] = "VT";
      sa[46] = "WA";
      sa[47] = "WI";
      sa[48] = "WV";
      sa[49] = "WY";
    }
  }
}
// The class representing column verification_status
class BadLoanModel_ColInfo_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    BadLoanModel_ColInfo_12_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "not verified";
      sa[1] = "verified";
    }
  }
}
// The class representing column bad_loan
class BadLoanModel_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    BadLoanModel_ColInfo_13_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class BadLoanModel_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_0_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[4]) || data[4 /* annual_inc */] <74449.22f ? 
                 (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 50, 0, data[6])) ? 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <24.253124f ? 
                        0.64687073f : 
                        0.57890743f) : 
                     (data[10 /* total_acc */] <6.5f ? 
                        0.36363637f : 
                        0.70946914f)) : 
                 (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 50, 0, data[6])) ? 
                        0.5603448f : 
                        0.71926767f) : 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <75.35f ? 
                        0.78980017f : 
                        0.71064204f))) : 
             (data[4 /* annual_inc */] <50632.812f ? 
                 (Double.isNaN(data[12 /* verification_status */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[12])) ? 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <28.699688f ? 
                        0.79345345f : 
                        0.6902574f) : 
                     (data[4 /* annual_inc */] <36580.883f ? 
                        0.77248955f : 
                        0.8244681f)) : 
                 (data[4 /* annual_inc */] <97893.49f ? 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                        0.7420382f : 
                        0.85972327f) : 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 50, 0, data[6])) ? 
                        0.77717394f : 
                        0.89685905f)))) : 
         (data[9 /* revol_util */] <57.395508f ? 
             (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                 (Double.isNaN(data[2]) || data[2 /* emp_length */] <0.5f ? 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 50, 0, data[6])) ? 
                        0.5416667f : 
                        0.8267717f) : 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <98265.625f ? 
                        0.77955914f : 
                        0.87763715f)) : 
                 (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 50, 0, data[6])) ? 
                     (data[11 /* longest_credit_length */] <9.5f ? 
                        0.8268657f : 
                        0.87657785f) : 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <98265.625f ? 
                        0.8995105f : 
                        0.95085067f))) : 
             (Double.isNaN(data[7]) || data[7 /* dti */] <25.892109f ? 
                 (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                     (Double.isNaN(data[12 /* verification_status */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[12])) ? 
                        0.70594835f : 
                        0.8f) : 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <98265.625f ? 
                        0.8357702f : 
                        0.9072886f)) : 
                 (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 50, 0, data[6])) ? 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <20125.5f ? 
                        0.6775956f : 
                        0.49624062f) : 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <31548.0f ? 
                        0.7612688f : 
                        0.9142857f)))));
    return pred;
  } // constant pool size = 214B, number of visited nodes = 31, static init size = 528B
  // {11001010 00001100 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {83, 48, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000111 10000000 00000001 00100100 10001001 10100001 11}
  public static final byte[] GRPSPLIT2 = new byte[] {-31, 1, -128, 36, -111, -123, 3};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {31, 0, 0, 0};
  // {00111111 01101111 10110111 00111011 01001100 11001110 01}
  public static final byte[] GRPSPLIT4 = new byte[] {-4, -10, -19, -36, 50, 115, 2};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111111 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 55, 0, 0};
  // {11111111 01111111 11111111 10111011 01101111 01111111 11}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -2, -1, -35, -10, -2, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10101110 10011100 11001111 01101110 11111111 11100101 11}
  public static final byte[] GRPSPLIT9 = new byte[] {117, 57, -13, 118, -1, -89, 3};
  // {11111111 10101110 11011111 01100101 01001101 10111011 11}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 117, -5, -90, -78, -35, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10110110 00001101 10010101 10011111 00111111 10101100 10}
  public static final byte[] GRPSPLIT13 = new byte[] {109, -80, -87, -7, -4, 53, 1};
}


class BadLoanModel_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_1_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12 /* verification_status */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[12])) ? 
         (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[4]) || data[4 /* annual_inc */] <74449.22f ? 
                 (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                     (data[4 /* annual_inc */] <33956.727f ? 
                        0.37179488f : 
                        0.5673877f) : 
                     (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                        0.6237785f : 
                        0.6868643f)) : 
                 (Double.isNaN(data[9]) || data[9 /* revol_util */] <68.285934f ? 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <22.348125f ? 
                        0.80273384f : 
                        0.71961105f) : 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 50, 0, data[6])) ? 
                        0.6729081f : 
                        0.74840474f))) : 
             (data[4 /* annual_inc */] <50632.812f ? 
                 (Double.isNaN(data[7]) || data[7 /* dti */] <24.644297f ? 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <42039.16f ? 
                        0.7928428f : 
                        0.83400345f) : 
                     (data[7 /* dti */] <28.20579f ? 
                        0.75711745f : 
                        0.69166166f)) : 
                 (Double.isNaN(data[9]) || data[9 /* revol_util */] <50.625782f ? 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                        0.7612613f : 
                        0.91113424f) : 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 50, 0, data[6])) ? 
                        0.80083275f : 
                        0.85372174f)))) : 
         (data[4 /* annual_inc */] <50632.812f ? 
             (data[9 /* revol_util */] <49.448437f ? 
                 (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <7508.5f ? 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 50, 0, data[6])) ? 
                        0.83011764f : 
                        0.91137373f) : 
                     (data[10 /* total_acc */] <12.5f ? 
                        0.74561405f : 
                        0.83551675f)) : 
                 (data[4 /* annual_inc */] <37320.46f ? 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.61f : 
                        0.7490494f) : 
                     (Double.isNaN(data[3 /* home_ownership */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                        0.79494864f : 
                        0.8274308f))) : 
             (Double.isNaN(data[9]) || data[9 /* revol_util */] <38.852345f ? 
                 (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 50, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 50, 0, data[6])) ? 
                        0.81560284f : 
                        0.8744493f) : 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.8765432f : 
                        0.92909336f)) : 
                 (data[7 /* dti */] <14.03789f ? 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        0.78210115f : 
                        0.88512015f) : 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 50, 0, data[6])) ? 
                        0.82919675f : 
                        0.8858781f)))));
    return pred;
  } // constant pool size = 219B, number of visited nodes = 31, static init size = 558B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11111111 10000100 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 33, 0, 0};
  // {11111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {31, 0, 0, 0};
  // {01010010 00000001 11110010 00110010 00011001 10111000 11}
  public static final byte[] GRPSPLIT4 = new byte[] {74, -128, 79, 76, -104, 29, 3};
  // {11111111 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 55, 0, 0};
  // {10111111 11111111 11111111 10111100 01111111 01111101 01}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, -1, -1, 61, -2, -66, 2};
  // {11010101 10011111 11110111 10110101 00010101 10000101 11}
  public static final byte[] GRPSPLIT7 = new byte[] {-85, -7, -17, -83, -88, -95, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {18, 0, 0, 0};
  // {11111111 00101110 11111101 11011011 01111111 01111111 01}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 116, -65, -37, -2, -2, 2};
  // {11111111 01111111 11111101 11011111 11111111 01111111 11}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -2, -65, -5, -1, -2, 3};
  // {11101111 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-9, 20, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00011001 10011000 00100011 10110011 11}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, -104, 25, -60, -51, 3};
}


class BadLoanModel_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_2_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* dti */] <18.210264f ? 
         (Double.isNaN(data[3 /* home_ownership */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[3])) ? 
             (Double.isNaN(data[12 /* verification_status */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[12])) ? 
                 (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[3])) ? 
                     (data[2 /* emp_length */] <2.5f ? 
                        0.9f : 
                        0.5f) : 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                        0.6904488f : 
                        0.8529233f)) : 
                 (Double.isNaN(data[4]) || data[4 /* annual_inc */] <50632.812f ? 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 50, 0, data[6])) ? 
                        0.742735f : 
                        0.83122265f) : 
                     (data[9 /* revol_util */] <70.640625f ? 
                        0.89088154f : 
                        0.8434309f))) : 
             (data[9 /* revol_util */] <44.739063f ? 
                 (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 50, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                        0.74489796f : 
                        0.87416005f) : 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <102695.31f ? 
                        0.9034135f : 
                        0.9418472f)) : 
                 (data[4 /* annual_inc */] <55097.656f ? 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 50, 0, data[6])) ? 
                        0.7351568f : 
                        0.83141965f) : 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <24758.5f ? 
                        0.86929923f : 
                        0.80027175f)))) : 
         (Double.isNaN(data[7]) || data[7 /* dti */] <25.84611f ? 
             (data[10 /* total_acc */] <18.5f ? 
                 (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 50, 0, data[6])) ? 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                        0.59011626f : 
                        0.7616179f) : 
                     (Double.isNaN(data[5 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                        0.7887212f : 
                        0.8773842f)) : 
                 (data[9 /* revol_util */] <57.689842f ? 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        0.7464246f : 
                        0.86284f) : 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        0.6496412f : 
                        0.82104933f))) : 
             (Double.isNaN(data[9]) || data[9 /* revol_util */] <55.92383f ? 
                 (data[9 /* revol_util */] <20.971436f ? 
                     (Double.isNaN(data[2]) || data[2 /* emp_length */] <9.5f ? 
                        0.82636654f : 
                        0.912f) : 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 50, 0, data[6])) ? 
                        0.7270163f : 
                        0.8168317f)) : 
                 (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <92.18907f ? 
                        0.6576903f : 
                        0.5408163f) : 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 50, 0, data[6])) ? 
                        0.6829441f : 
                        0.7777778f)))));
    return pred;
  } // constant pool size = 224B, number of visited nodes = 31, static init size = 588B
  // {01100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {6, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {55, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {11011111 10111110 01011111 11100100 01110111 10111111 10}
  public static final byte[] GRPSPLIT4 = new byte[] {-5, 125, -6, 39, -18, -3, 1};
  // {10111101 00111110 11111101 00001001 00101101 00111011 11}
  public static final byte[] GRPSPLIT5 = new byte[] {-67, 124, -65, -112, -76, -36, 3};
  // {11111110 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {127, 55, 0, 0};
  // {10011111 10011101 10101101 01001100 01101001 00111111 11}
  public static final byte[] GRPSPLIT7 = new byte[] {-7, -71, -75, 50, -106, -4, 3};
  // {00010111 00000110 10100000 00110101 00011100 10110000 01}
  public static final byte[] GRPSPLIT8 = new byte[] {-24, 96, 5, -84, 56, 13, 2};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {11010000 00000100 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {11, 32, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {00110110 10001100 11010101 11111100 00011101 11100011 10}
  public static final byte[] GRPSPLIT13 = new byte[] {108, 49, -85, 63, -72, -57, 1};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {23, 0, 0, 0};
  // {10111111 10100000 10010010 00100100 01101000 10100011 10}
  public static final byte[] GRPSPLIT15 = new byte[] {-3, 5, 73, 36, 22, -59, 1};
}


class BadLoanModel_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_3_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[4 /* annual_inc */] <62541.016f ? 
         (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 50, 0, data[6])) ? 
                     (data[4 /* annual_inc */] <32770.508f ? 
                        0.17391305f : 
                        0.36792454f) : 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <21793.5f ? 
                        1.0f : 
                        0.6666667f)) : 
                 (data[9 /* revol_util */] <47.09375f ? 
                     (Double.isNaN(data[5 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                        0.7040971f : 
                        0.79373366f) : 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 50, 0, data[6])) ? 
                        0.5813187f : 
                        0.6601539f))) : 
             (data[4 /* annual_inc */] <37189.566f ? 
                 (data[9 /* revol_util */] <42.384377f ? 
                     (Double.isNaN(data[10]) || data[10 /* total_acc */] <70.0f ? 
                        0.8354662f : 
                        0.0f) : 
                     (data[4 /* annual_inc */] <23825.39f ? 
                        0.6953317f : 
                        0.7486849f)) : 
                 (Double.isNaN(data[3 /* home_ownership */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[3])) ? 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 50, 0, data[6])) ? 
                        0.80197185f : 
                        0.85013264f) : 
                     (data[9 /* revol_util */] <56.5125f ? 
                        0.87567985f : 
                        0.8103085f)))) : 
         (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
             (data[4 /* annual_inc */] <86124.836f ? 
                 (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 50, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                        0.4f : 
                        0.66742426f) : 
                     (data[10 /* total_acc */] <6.5f ? 
                        0.3846154f : 
                        0.7400113f)) : 
                 (data[9 /* revol_util */] <71.81797f ? 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                        0.7467533f : 
                        0.8254339f) : 
                     (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                        0.627907f : 
                        0.74758005f))) : 
             (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <25836.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* dti */] <21.212812f ? 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <44.739063f ? 
                        0.92720526f : 
                        0.8814089f) : 
                     (Double.isNaN(data[10]) || data[10 /* total_acc */] <32.5f ? 
                        0.82931894f : 
                        0.8658768f)) : 
                 (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <18.717188f ? 
                        0.8365696f : 
                        0.75541794f) : 
                     (Double.isNaN(data[8]) || data[8 /* delinq_2yrs */] <2.5f ? 
                        0.8662084f : 
                        0.65789473f)))));
    return pred;
  } // constant pool size = 203B, number of visited nodes = 31, static init size = 462B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {11101111 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 55, 0, 0};
  // {10000100 00000000 00001001 00000000 10000010 00000000 01}
  public static final byte[] GRPSPLIT2 = new byte[] {33, 0, -112, 0, 65, 0, 2};
  // {10011100 10111100 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {57, 61, 0, 0};
  // {10100101 00100000 00101011 01100110 01001000 11100001 11}
  public static final byte[] GRPSPLIT4 = new byte[] {-91, 4, -44, 102, 18, -121, 3};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {18, 0, 0, 0};
  // {00010011 00001010 10011000 11000100 00100000 10111111 11}
  public static final byte[] GRPSPLIT6 = new byte[] {-56, 80, 25, 35, 4, -3, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00011111 01101110 10011111 01101010 10011011 10111111 11}
  public static final byte[] GRPSPLIT8 = new byte[] {-8, 118, -7, 86, -39, -3, 3};
  // {11111110 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {127, 7, 0, 0};
  // {11111100 10101000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {63, 21, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {30, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
}


class BadLoanModel_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_4_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 50, 0, data[6])) ? 
             (Double.isNaN(data[4]) || data[4 /* annual_inc */] <74449.22f ? 
                 (data[9 /* revol_util */] <57.689842f ? 
                     (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[3])) ? 
                        0.6770099f : 
                        0.7218935f) : 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                        0.39772728f : 
                        0.61863846f)) : 
                 (data[9 /* revol_util */] <67.1086f ? 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(48, 0, data[6]) || (GenModel.bitSetIsInRange(48, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 48, 0, data[6])) ? 
                        0.77346635f : 
                        0.8418334f) : 
                     (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[3])) ? 
                        0.63151366f : 
                        0.73200184f))) : 
             (data[2 /* emp_length */] <2.5f ? 
                 (data[7 /* dti */] <10.606406f ? 
                     (data[10 /* total_acc */] <15.5f ? 
                        0.75f : 
                        0.95652175f) : 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <77.70469f ? 
                        0.7979798f : 
                        0.5f)) : 
                 (data[4 /* annual_inc */] <38310.0f ? 
                     (!Double.isNaN(data[12 /* verification_status */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[12])) ? 
                        0.33333334f : 
                        0.75757575f) : 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <30688.5f ? 
                        0.8607306f : 
                        0.6727273f)))) : 
         (data[9 /* revol_util */] <45.033398f ? 
             (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                 (data[4 /* annual_inc */] <50632.812f ? 
                     (Double.isNaN(data[8]) || data[8 /* delinq_2yrs */] <0.5f ? 
                        0.81375957f : 
                        0.74178404f) : 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <607357.56f ? 
                        0.8693495f : 
                        0.33333334f)) : 
                 (Double.isNaN(data[3 /* home_ownership */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <98265.625f ? 
                        0.8740718f : 
                        0.9322344f) : 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <98265.625f ? 
                        0.9068105f : 
                        0.94469225f))) : 
             (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                 (data[4 /* annual_inc */] <50632.812f ? 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <99.059395f ? 
                        0.70470667f : 
                        0.9047619f) : 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <74.395355f ? 
                        0.81202435f : 
                        0.76785713f)) : 
                 (data[4 /* annual_inc */] <50632.812f ? 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 50, 0, data[6])) ? 
                        0.7572995f : 
                        0.80530035f) : 
                     (Double.isNaN(data[5 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                        0.8520885f : 
                        0.8877277f)))));
    return pred;
  } // constant pool size = 194B, number of visited nodes = 31, static init size = 408B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00100101 00000000 00000000 00100000 00000000 00000000 11}
  public static final byte[] GRPSPLIT1 = new byte[] {-92, 0, 0, 4, 0, 0, 3};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11111011 11001100 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, 51, 0, 0};
  // {01001000 00100000 01000001 01010101 00001010 11001010}
  public static final byte[] GRPSPLIT4 = new byte[] {18, 4, -126, -86, 80, 83};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {30, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {11101111 00000100 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-9, 32, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {11101010 10101100 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {87, 53, 0, 0};
  // {10010101 00100110 11100111 00110101 00101011 00110010 11}
  public static final byte[] GRPSPLIT10 = new byte[] {-87, 100, -25, -84, -44, 76, 3};
  // {01010111 01111100 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-22, 62, 0, 0};
}


