package me.karun.loans.service.model;

/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-09-11T00:47:22.662-04:00
  3.10.4.8
  
  Standalone prediction code with sample test data for DRFModel named BadLoanModel

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/BadLoanModel > BadLoanModel.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m BadLoanModel.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="BadLoanModel", algorithm="drf")
public class BadLoanModel extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_BadLoanModel.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* loan_amnt */ null,
    /* term */ BadLoanModel_ColInfo_1.VALUES,
    /* emp_length */ null,
    /* home_ownership */ BadLoanModel_ColInfo_3.VALUES,
    /* annual_inc */ null,
    /* purpose */ BadLoanModel_ColInfo_5.VALUES,
    /* addr_state */ BadLoanModel_ColInfo_6.VALUES,
    /* dti */ null,
    /* delinq_2yrs */ null,
    /* revol_util */ null,
    /* total_acc */ null,
    /* longest_credit_length */ null,
    /* verification_status */ BadLoanModel_ColInfo_12.VALUES,
    /* bad_loan_categorical */ BadLoanModel_ColInfo_13.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.8170756157369565,0.18292438426304344};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.8170756157369565,0.18292438426304344};

  public BadLoanModel() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(3713182582894837263L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    BadLoanModel_Forest_0.score0(data,preds);
    BadLoanModel_Forest_1.score0(data,preds);
    BadLoanModel_Forest_2.score0(data,preds);
    BadLoanModel_Forest_3.score0(data,preds);
    BadLoanModel_Forest_4.score0(data,preds);
    preds[1] /= 5;
    preds[2] = 1.0 - preds[1];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.18469728317605444);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_BadLoanModel implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    NamesHolder_BadLoanModel_0.fill(VALUES);
  }
  static final class NamesHolder_BadLoanModel_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "loan_amnt";
      sa[1] = "term";
      sa[2] = "emp_length";
      sa[3] = "home_ownership";
      sa[4] = "annual_inc";
      sa[5] = "purpose";
      sa[6] = "addr_state";
      sa[7] = "dti";
      sa[8] = "delinq_2yrs";
      sa[9] = "revol_util";
      sa[10] = "total_acc";
      sa[11] = "longest_credit_length";
      sa[12] = "verification_status";
    }
  }
}
// The class representing column term
class BadLoanModel_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    BadLoanModel_ColInfo_1_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "36 months";
      sa[1] = "60 months";
    }
  }
}
// The class representing column home_ownership
class BadLoanModel_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    BadLoanModel_ColInfo_3_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "ANY";
      sa[1] = "MORTGAGE";
      sa[2] = "NONE";
      sa[3] = "OTHER";
      sa[4] = "OWN";
      sa[5] = "RENT";
    }
  }
}
// The class representing column purpose
class BadLoanModel_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[14];
  static {
    BadLoanModel_ColInfo_5_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "car";
      sa[1] = "credit_card";
      sa[2] = "debt_consolidation";
      sa[3] = "educational";
      sa[4] = "home_improvement";
      sa[5] = "house";
      sa[6] = "major_purchase";
      sa[7] = "medical";
      sa[8] = "moving";
      sa[9] = "other";
      sa[10] = "renewable_energy";
      sa[11] = "small_business";
      sa[12] = "vacation";
      sa[13] = "wedding";
    }
  }
}
// The class representing column addr_state
class BadLoanModel_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[50];
  static {
    BadLoanModel_ColInfo_6_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "AK";
      sa[1] = "AL";
      sa[2] = "AR";
      sa[3] = "AZ";
      sa[4] = "CA";
      sa[5] = "CO";
      sa[6] = "CT";
      sa[7] = "DC";
      sa[8] = "DE";
      sa[9] = "FL";
      sa[10] = "GA";
      sa[11] = "HI";
      sa[12] = "IA";
      sa[13] = "ID";
      sa[14] = "IL";
      sa[15] = "IN";
      sa[16] = "KS";
      sa[17] = "KY";
      sa[18] = "LA";
      sa[19] = "MA";
      sa[20] = "MD";
      sa[21] = "ME";
      sa[22] = "MI";
      sa[23] = "MN";
      sa[24] = "MO";
      sa[25] = "MS";
      sa[26] = "MT";
      sa[27] = "NC";
      sa[28] = "NE";
      sa[29] = "NH";
      sa[30] = "NJ";
      sa[31] = "NM";
      sa[32] = "NV";
      sa[33] = "NY";
      sa[34] = "OH";
      sa[35] = "OK";
      sa[36] = "OR";
      sa[37] = "PA";
      sa[38] = "RI";
      sa[39] = "SC";
      sa[40] = "SD";
      sa[41] = "TN";
      sa[42] = "TX";
      sa[43] = "UT";
      sa[44] = "VA";
      sa[45] = "VT";
      sa[46] = "WA";
      sa[47] = "WI";
      sa[48] = "WV";
      sa[49] = "WY";
    }
  }
}
// The class representing column verification_status
class BadLoanModel_ColInfo_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    BadLoanModel_ColInfo_12_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "not verified";
      sa[1] = "verified";
    }
  }
}
// The class representing column bad_loan_categorical
class BadLoanModel_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    BadLoanModel_ColInfo_13_0.fill(VALUES);
  }
  static final class BadLoanModel_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class BadLoanModel_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_0_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* revol_util */] <47.976757f ? 
         (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
             (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 50, 0, data[6])) ? 
                 (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                     (data[11 /* longest_credit_length */] <3.5f ? 
                        0.0f : 
                        0.57589287f) : 
                     (Double.isNaN(data[4]) || data[4 /* annual_inc */] <526960.94f ? 
                        0.7685009f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* delinq_2yrs */] <0.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* longest_credit_length */] <26.5f ? 
                        0.91497976f : 
                        0.6666667f) : 
                     (data[11 /* longest_credit_length */] <6.5f ? 
                        0.5f : 
                        0.77272725f))) : 
             (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 50, 0, data[6])) ? 
                 (data[11 /* longest_credit_length */] <9.5f ? 
                     (data[2 /* emp_length */] <0.5f ? 
                        0.87173396f : 
                        0.8045541f) : 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        0.7589651f : 
                        0.8810941f)) : 
                 (Double.isNaN(data[3 /* home_ownership */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        0.75522137f : 
                        0.8769295f) : 
                     (data[9 /* revol_util */] <27.736563f ? 
                        0.9281046f : 
                        0.8833262f)))) : 
         (data[4 /* annual_inc */] <62541.016f ? 
             (data[9 /* revol_util */] <71.65125f ? 
                 (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 50, 0, data[6])) ? 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <16133.5f ? 
                        0.77188146f : 
                        0.6641791f) : 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.6822857f : 
                        0.8297101f)) : 
                 (Double.isNaN(data[12 /* verification_status */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <15055.5f ? 
                        0.73291296f : 
                        0.624872f) : 
                     (data[0 /* loan_amnt */] <6429.5f ? 
                        0.7914968f : 
                        0.7572559f))) : 
             (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <25028.5f ? 
                 (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                        0.63529414f : 
                        0.755385f) : 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 50, 0, data[6])) ? 
                        0.8638739f : 
                        0.8966732f)) : 
                 (Double.isNaN(data[4]) || data[4 /* annual_inc */] <109709.64f ? 
                     (data[11 /* longest_credit_length */] <13.5f ? 
                        0.65341616f : 
                        0.7259852f) : 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 50, 0, data[6])) ? 
                        0.64285713f : 
                        0.8168839f)))));
    return pred;
  } // constant pool size = 211B, number of visited nodes = 31, static init size = 510B
  // {11101111 01101100 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, 54, 0, 0};
  // {10110011 00000010 01000011 01000101 00000010 11001101 01}
  public static final byte[] GRPSPLIT1 = new byte[] {-51, 64, -62, -94, 64, -77, 2};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00111101 10110100 10110100 10100101 00001101 00101011 11}
  public static final byte[] GRPSPLIT3 = new byte[] {-68, 45, 45, -91, -80, -44, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10110111 00101100 00010111 11111100 00001001 10111100 11}
  public static final byte[] GRPSPLIT7 = new byte[] {-19, 52, -24, 63, -112, 61, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {11101111 00001100 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, 48, 0, 0};
  // {10000101 10011010 01000000 10011101 00101001 10111001 11}
  public static final byte[] GRPSPLIT12 = new byte[] {-95, 89, 2, -71, -108, -99, 3};
  // {11111110 11101111 10111111 00011011 11001001 11101111 11}
  public static final byte[] GRPSPLIT13 = new byte[] {127, -9, -3, -40, -109, -9, 3};
}


class BadLoanModel_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_1_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* dti */] <18.210264f ? 
         (data[10 /* total_acc */] <19.0f ? 
             (data[7 /* dti */] <9.531796f ? 
                 (data[4 /* annual_inc */] <50632.812f ? 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        0.66838044f : 
                        0.8272753f) : 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 50, 0, data[6])) ? 
                        0.8474779f : 
                        0.91226214f)) : 
                 (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 50, 0, data[6])) ? 
                        0.6359338f : 
                        0.793341f) : 
                     (Double.isNaN(data[12 /* verification_status */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[12])) ? 
                        0.7940424f : 
                        0.8351113f))) : 
             (Double.isNaN(data[9]) || data[9 /* revol_util */] <40.61836f ? 
                 (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                        0.68303573f : 
                        0.8205897f) : 
                     (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                        0.8906999f : 
                        0.92679405f)) : 
                 (data[4 /* annual_inc */] <50632.812f ? 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        0.70612246f : 
                        0.8094915f) : 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                        0.7526909f : 
                        0.8821742f)))) : 
         (Double.isNaN(data[7]) || data[7 /* dti */] <24.446203f ? 
             (data[4 /* annual_inc */] <50632.812f ? 
                 (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 50, 0, data[6])) ? 
                     (!Double.isNaN(data[2]) ? 
                        0.74425614f : 
                        0.6168478f) : 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                        0.7078652f : 
                        0.82578045f)) : 
                 (data[9 /* revol_util */] <57.689842f ? 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <22602.5f ? 
                        0.86912227f : 
                        0.7894737f) : 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        0.6656848f : 
                        0.8367559f))) : 
             (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 50, 0, data[6])) ? 
                 (Double.isNaN(data[9]) || data[9 /* revol_util */] <56.5125f ? 
                     (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <14516.5f ? 
                        0.7864438f : 
                        0.7245179f) : 
                     (!Double.isNaN(data[2]) ? 
                        0.6898148f : 
                        0.5477387f)) : 
                 (Double.isNaN(data[9]) || data[9 /* revol_util */] <72.995316f ? 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(49, 0, data[6]) || (GenModel.bitSetIsInRange(49, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 49, 0, data[6])) ? 
                        0.77974087f : 
                        0.84752744f) : 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <100.09719f ? 
                        0.7285714f : 
                        0.33333334f)))));
    return pred;
  } // constant pool size = 212B, number of visited nodes = 31, static init size = 540B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00000111 00010000 01000000 00100001 00001100 10101100 10}
  public static final byte[] GRPSPLIT1 = new byte[] {-32, 8, 2, -124, 48, 53, 1};
  // {11101011 10101100 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-41, 53, 0, 0};
  // {00111110 00111100 10110111 01101011 01001100 00101010 11}
  public static final byte[] GRPSPLIT3 = new byte[] {124, 60, -19, -42, 50, 84, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111111 10101100 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 53, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {23, 0, 0, 0};
  // {11110001 00001100 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-113, 48, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {10010101 00000010 10100000 11110100 00000011 10100001 11}
  public static final byte[] GRPSPLIT10 = new byte[] {-87, 64, 5, 47, -64, -123, 3};
  // {11101111 10101100 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, 53, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10110111 10011100 00000001 00110001 00101001 10100110 10}
  public static final byte[] GRPSPLIT13 = new byte[] {-19, 57, -128, -116, -108, 101, 1};
  // {11111001 11101111 11111111 11001110 11011110 11011111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-97, -9, -1, 115, 123, -5, 1};
}


class BadLoanModel_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_2_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[9 /* revol_util */] <47.976757f ? 
         (data[9 /* revol_util */] <26.23729f ? 
             (Double.isNaN(data[4]) || data[4 /* annual_inc */] <74449.22f ? 
                 (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <10.658899f ? 
                        0.79262674f : 
                        0.6507937f) : 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
                        0.75278014f : 
                        0.8894101f)) : 
                 (Double.isNaN(data[8]) || data[8 /* delinq_2yrs */] <0.5f ? 
                     (data[10 /* total_acc */] <5.5f ? 
                        0.7567568f : 
                        0.92806304f) : 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                        0.6097561f : 
                        0.88797814f))) : 
             (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 50, 0, data[6])) ? 
                 (Double.isNaN(data[10]) || data[10 /* total_acc */] <26.5f ? 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        0.6787942f : 
                        0.8316187f) : 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <18.09328f ? 
                        0.87365484f : 
                        0.79013586f)) : 
                 (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                     (Double.isNaN(data[8]) || data[8 /* delinq_2yrs */] <2.5f ? 
                        0.7198068f : 
                        0.33333334f) : 
                     (Double.isNaN(data[5 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                        0.8589172f : 
                        0.8960034f)))) : 
         (data[4 /* annual_inc */] <62541.016f ? 
             (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                 (Double.isNaN(data[8]) || data[8 /* delinq_2yrs */] <4.5f ? 
                     (Double.isNaN(data[3 /* home_ownership */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                        0.57600695f : 
                        0.642687f) : 
                     (Double.isNaN(data[11]) || data[11 /* longest_credit_length */] <26.5f ? 
                        0.27272728f : 
                        1.0f)) : 
                 (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <24.253124f ? 
                        0.74642557f : 
                        0.6503198f) : 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 50, 0, data[6])) ? 
                        0.77469534f : 
                        0.8161482f))) : 
             (Double.isNaN(data[7]) || data[7 /* dti */] <21.921093f ? 
                 (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                     (data[7 /* dti */] <7.877893f ? 
                        0.80804956f : 
                        0.73877853f) : 
                     (Double.isNaN(data[12 /* verification_status */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[12])) ? 
                        0.83633053f : 
                        0.8813687f)) : 
                 (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 50, 0, data[6])) ? 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.5991379f : 
                        0.8f) : 
                     (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                        0.7255489f : 
                        0.84865415f)))));
    return pred;
  } // constant pool size = 215B, number of visited nodes = 31, static init size = 534B
  // {11111111 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, 55, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11101111 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, 55, 0, 0};
  // {10111101 10001101 10000001 00010101 00011001 00101110 11}
  public static final byte[] GRPSPLIT3 = new byte[] {-67, -79, -127, -88, -104, 116, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11101111 11101100 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-9, 55, 0, 0};
  // {11001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {51, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {11100010 00001100 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {71, 48, 0, 0};
  // {11010111 10000000 11100101 00110100 00111101 10111111 11}
  public static final byte[] GRPSPLIT10 = new byte[] {-21, 1, -89, 44, -68, -3, 3};
  // {11101010 10001100 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {87, 49, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10011111 00101001 00001011 01110000 00111000 10101001 01}
  public static final byte[] GRPSPLIT13 = new byte[] {-7, -108, -48, 14, 28, -107, 2};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
}


class BadLoanModel_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_3_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <15021.5f ? 
         (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
             (data[4 /* annual_inc */] <50632.812f ? 
                 (Double.isNaN(data[3 /* home_ownership */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[3])) ? 
                     (Double.isNaN(data[11]) || data[11 /* longest_credit_length */] <25.5f ? 
                        0.63380283f : 
                        0.50617284f) : 
                     (data[4 /* annual_inc */] <34161.645f ? 
                        0.59770113f : 
                        0.71857923f)) : 
                 (data[4 /* annual_inc */] <66716.67f ? 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 50, 0, data[6])) ? 
                        0.66857964f : 
                        0.78700364f) : 
                     (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                        0.790625f : 
                        0.8372457f))) : 
             (Double.isNaN(data[3 /* home_ownership */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 50, 0, data[6])) ? 
                     (data[9 /* revol_util */] <75.35f ? 
                        0.8061053f : 
                        0.72383356f) : 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <18.09328f ? 
                        0.8539046f : 
                        0.7909141f)) : 
                 (Double.isNaN(data[7]) || data[7 /* dti */] <16.533516f ? 
                     (data[10 /* total_acc */] <21.5f ? 
                        0.87930405f : 
                        0.9117424f) : 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 50, 0, data[6])) ? 
                        0.8114543f : 
                        0.85937154f)))) : 
         (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
             (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 50, 0, data[6])) ? 
                 (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 50, 0, data[6])) ? 
                        0.57227486f : 
                        0.6768018f) : 
                     (Double.isNaN(data[2]) || data[2 /* emp_length */] <2.5f ? 
                        0.6463576f : 
                        0.6903955f)) : 
                 (Double.isNaN(data[2]) || data[2 /* emp_length */] <0.5f ? 
                     (data[9 /* revol_util */] <47.09375f ? 
                        0.78881985f : 
                        0.60509557f) : 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <17.469376f ? 
                        0.7697871f : 
                        0.68371135f))) : 
             (Double.isNaN(data[7]) || data[7 /* dti */] <25.268204f ? 
                 (Double.isNaN(data[9]) || data[9 /* revol_util */] <65.93125f ? 
                     (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 50, 0, data[6])) ? 
                        0.853211f : 
                        0.8999545f) : 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.6818182f : 
                        0.8417465f)) : 
                 (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 50, 0, data[6])) ? 
                     (data[11 /* longest_credit_length */] <9.5f ? 
                        0.5365854f : 
                        0.71210015f) : 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <30.610937f ? 
                        0.9375f : 
                        0.8066759f)))));
    return pred;
  } // constant pool size = 217B, number of visited nodes = 31, static init size = 546B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00010110 10100001 00011010 11000010 01101010 00010010 11}
  public static final byte[] GRPSPLIT2 = new byte[] {104, -123, 88, 67, 86, 72, 3};
  // {01100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {6, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11111111 10101110 11111111 01110110 01101111 10111011 01}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 117, -1, 110, -10, -35, 2};
  // {10011101 10011100 11000100 10111100 00001101 11111100 11}
  public static final byte[] GRPSPLIT6 = new byte[] {-71, 57, 35, 61, -80, 63, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {10111101 00100000 10010001 01100000 00001001 11101001 11}
  public static final byte[] GRPSPLIT8 = new byte[] {-67, 4, -119, 6, -112, -105, 3};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {30, 0, 0, 0};
  // {01000000 00000001 00100000 10010010 01000100 00000100 00}
  public static final byte[] GRPSPLIT10 = new byte[] {2, -128, 4, 73, 34, 32, 0};
  // {10011100 00111110 11010000 10000101 00000000 01101101 10}
  public static final byte[] GRPSPLIT11 = new byte[] {57, 124, 11, -95, 0, -74, 1};
  // {11100010 01001000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {71, 18, 0, 0};
  // {10110111 10011111 10001110 01011110 00111111 00100110 11}
  public static final byte[] GRPSPLIT13 = new byte[] {-19, -7, 113, 122, -4, 100, 3};
}


class BadLoanModel_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += BadLoanModel_Tree_4_class_0.score0(fdata);
  }
}
class BadLoanModel_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* term */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (data[10 /* total_acc */] <21.0f ? 
             (Double.isNaN(data[7]) || data[7 /* dti */] <21.83672f ? 
                 (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 50, 0, data[6])) ? 
                     (data[9 /* revol_util */] <80.05937f ? 
                        0.6492147f : 
                        0.54846334f) : 
                     (!Double.isNaN(data[5 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                        0.5233645f : 
                        0.7171157f)) : 
                 (Double.isNaN(data[5 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* addr_state */]) || !GenModel.bitSetIsInRange(50, 0, data[6]) || (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 50, 0, data[6])) ? 
                        0.5081522f : 
                        0.6932773f) : 
                    1.0f)) : 
             (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 50, 0, data[6])) ? 
                 (Double.isNaN(data[7]) || data[7 /* dti */] <21.83672f ? 
                     (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                        0.6842568f : 
                        0.7470707f) : 
                     (Double.isNaN(data[8]) || data[8 /* delinq_2yrs */] <0.5f ? 
                        0.6446602f : 
                        0.56747407f)) : 
                 (Double.isNaN(data[5 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                     (data[7 /* dti */] <16.845469f ? 
                        0.78284055f : 
                        0.69919634f) : 
                     (Double.isNaN(data[11]) || data[11 /* longest_credit_length */] <39.5f ? 
                        0.7899934f : 
                        0.46153846f)))) : 
         (!Double.isNaN(data[2]) ? 
             (data[10 /* total_acc */] <17.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* annual_inc */] <50632.812f ? 
                     (data[9 /* revol_util */] <48.34375f ? 
                        0.83733743f : 
                        0.76887476f) : 
                     (Double.isNaN(data[7]) || data[7 /* dti */] <18.717188f ? 
                        0.873979f : 
                        0.8015013f)) : 
                 (!Double.isNaN(data[6 /* addr_state */]) && (GenModel.bitSetIsInRange(50, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 50, 0, data[6])) ? 
                     (Double.isNaN(data[9]) || data[9 /* revol_util */] <51.803123f ? 
                        0.8700361f : 
                        0.79353935f) : 
                     (!Double.isNaN(data[3 /* home_ownership */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                        0.84072405f : 
                        0.88611424f))) : 
            0.7534469f));
    return pred;
  } // constant pool size = 154B, number of visited nodes = 23, static init size = 372B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00111100 10000010 01011001 00010010 00001100 00111001 11}
  public static final byte[] GRPSPLIT1 = new byte[] {60, 65, -102, 72, 48, -100, 3};
  // {11111111 11100100 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 39, 0, 0};
  // {10000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-127, 1, 0, 0};
  // {01100101 00100011 00000000 00000000 10000100 00100101 11}
  public static final byte[] GRPSPLIT4 = new byte[] {-90, -60, 0, 0, 33, -92, 3};
  // {10011111 00001101 00011111 01101110 10001011 11100110 11}
  public static final byte[] GRPSPLIT5 = new byte[] {-7, -80, -8, 118, -47, 103, 3};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {11001100 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {51, 20, 0, 0};
  // {10011111 10101011 11111111 10110101 01101111 10111111 11}
  public static final byte[] GRPSPLIT8 = new byte[] {-7, -43, -1, -83, -10, -3, 3};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {23, 0, 0, 0};
}


